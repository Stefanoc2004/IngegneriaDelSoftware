package it.unicam.cs.ids.filieraagricola.model;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a Platform Manager in the agricultural supply chain platform.
 *
 * <p>A Platform Manager has the responsibility of managing administrative aspects
 * of the platform, including authorizations and accreditations for involved actors.
 * They oversee the overall operation of the platform, manage user permissions,
 * monitor system performance, and ensure compliance with platform policies.</p>
 *
 * <p>This class extends {@link Actor} and implements specific functionality for
 * administrative management, user authorization, and system oversight.</p>
 */
public class PlatformManager extends Actor {

    /**
     * List of user IDs managed by this platform manager
     */
    private List<String> managedUserIds;

    /**
     * List of authorization request IDs handled by this manager
     */
    private List<String> handledAuthorizationIds;

    /**
     * List of system report IDs generated by this manager
     */
    private List<String> generatedReportIds;

    /**
     * List of administrative areas this manager is responsible for
     */
    private List<String> administrativeAreas;

    /**
     * Total number of users authorized by this manager
     */
    private int totalUsersAuthorized;

    /**
     * Date when the manager started working on the platform
     */
    private LocalDateTime startDate;

    /**
     * Manager's access level (e.g., "junior", "senior", "administrator", "super_admin")
     */
    private String accessLevel;

    /**
     * Maximum number of users this manager can handle simultaneously
     */
    private int maxManagedUsers;

    /**
     * Whether this manager can approve new actor registrations
     */
    private boolean canApproveRegistrations;

    /**
     * Whether this manager can modify system configurations
     */
    private boolean canModifySystemConfig;

    /**
     * Whether this manager can access financial reports
     */
    private boolean canAccessFinancialReports;

    /**
     * Number of system alerts handled by this manager
     */
    private int handledAlertsCount;

    /**
     * Default constructor for frameworks and prototype pattern.
     * Sets the actor type to PLATFORM_MANAGER and initializes collections.
     */
    public PlatformManager() {
        super();
        this.type = ActorType.PLATFORM_MANAGER;
        this.managedUserIds = new ArrayList<>();
        this.handledAuthorizationIds = new ArrayList<>();
        this.generatedReportIds = new ArrayList<>();
        this.administrativeAreas = new ArrayList<>();
        this.totalUsersAuthorized = 0;
        this.startDate = LocalDateTime.now();
        this.accessLevel = "junior";
        this.maxManagedUsers = 100;
        this.canApproveRegistrations = false;
        this.canModifySystemConfig = false;
        this.canAccessFinancialReports = false;
        this.handledAlertsCount = 0;
    }

    /**
     * Full constructor with validation and normalization.
     *
     * @param id unique identifier (if null or empty, a new UUID will be generated)
     * @param name manager name (must not be null or empty)
     * @param email email address (must not be null or empty)
     * @param phone phone number (may be null)
     * @param address office address (may be null)
     * @param active whether the manager is active
     * @param administrativeAreas list of administrative areas (may be null, will be initialized as empty)
     * @param startDate date when manager started (must not be null)
     * @param accessLevel access level (may be null, defaults to "junior")
     * @param maxManagedUsers maximum managed users (must be > 0)
     * @param canApproveRegistrations whether can approve registrations
     * @param canModifySystemConfig whether can modify system config
     * @param canAccessFinancialReports whether can access financial reports
     * @throws IllegalArgumentException if any validation fails
     */
    public PlatformManager(String id, String name, String email, String phone, String address, boolean active,
                           List<String> administrativeAreas, LocalDateTime startDate, String accessLevel,
                           int maxManagedUsers, boolean canApproveRegistrations, boolean canModifySystemConfig,
                           boolean canAccessFinancialReports) {
        super(id, name, email, phone, address, ActorType.PLATFORM_MANAGER, active);

        validateStartDate(startDate);
        validateMaxManagedUsers(maxManagedUsers);

        this.managedUserIds = new ArrayList<>();
        this.handledAuthorizationIds = new ArrayList<>();
        this.generatedReportIds = new ArrayList<>();
        this.administrativeAreas = administrativeAreas != null ? new ArrayList<>(administrativeAreas) : new ArrayList<>();
        this.totalUsersAuthorized = 0;
        this.startDate = startDate;
        this.accessLevel = accessLevel != null ? accessLevel.trim().toLowerCase() : "junior";
        this.maxManagedUsers = maxManagedUsers;
        this.canApproveRegistrations = canApproveRegistrations;
        this.canModifySystemConfig = canModifySystemConfig;
        this.canAccessFinancialReports = canAccessFinancialReports;
        this.handledAlertsCount = 0;
    }

    /**
     * Copy constructor for cloning.
     *
     * @param other the PlatformManager instance to copy
     * @throws IllegalArgumentException if other is null
     */
    public PlatformManager(PlatformManager other) {
        super(other);
        this.managedUserIds = new ArrayList<>(other.managedUserIds);
        this.handledAuthorizationIds = new ArrayList<>(other.handledAuthorizationIds);
        this.generatedReportIds = new ArrayList<>(other.generatedReportIds);
        this.administrativeAreas = new ArrayList<>(other.administrativeAreas);
        this.totalUsersAuthorized = other.totalUsersAuthorized;
        this.startDate = other.startDate;
        this.accessLevel = other.accessLevel;
        this.maxManagedUsers = other.maxManagedUsers;
        this.canApproveRegistrations = other.canApproveRegistrations;
        this.canModifySystemConfig = other.canModifySystemConfig;
        this.canAccessFinancialReports = other.canAccessFinancialReports;
        this.handledAlertsCount = other.handledAlertsCount;
    }

    /**
     * Creates a deep copy of this PlatformManager instance.
     * This method implements the Prototype pattern.
     *
     * @return a new PlatformManager instance that is a copy of this instance
     */
    @Override
    public PlatformManager clone() {
        return new PlatformManager(this);
    }

    /**
     * Returns the list of managed user IDs.
     *
     * @return defensive copy of managed user IDs list
     */
    public List<String> getManagedUserIds() {
        return new ArrayList<>(managedUserIds);
    }

    /**
     * Sets the managed user IDs for this platform manager.
     *
     * @param managedUserIds list of managed user IDs (may be null, will be treated as empty)
     */
    public void setManagedUserIds(List<String> managedUserIds) {
        this.managedUserIds = managedUserIds != null ? new ArrayList<>(managedUserIds) : new ArrayList<>();
    }

    /**
     * Adds a managed user ID to this platform manager's responsibility.
     *
     * @param userId user ID to add (must not be null or empty)
     * @throws IllegalArgumentException if userId is null or empty
     * @throws IllegalStateException if maximum managed users limit is reached
     */
    public void addManagedUserId(String userId) {
        if (userId == null || userId.trim().isEmpty()) {
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }
        if (managedUserIds.size() >= maxManagedUsers) {
            throw new IllegalStateException("Maximum managed users limit reached");
        }
        String normalizedId = userId.trim();
        if (!managedUserIds.contains(normalizedId)) {
            managedUserIds.add(normalizedId);
        }
    }

    /**
     * Removes a managed user ID from this platform manager's responsibility.
     *
     * @param userId user ID to remove (must not be null or empty)
     * @throws IllegalArgumentException if userId is null or empty
     */
    public void removeManagedUserId(String userId) {
        if (userId == null || userId.trim().isEmpty()) {
            throw new IllegalArgumentException("User ID cannot be null or empty");
        }
        managedUserIds.remove(userId.trim());
    }

    /**
     * Returns the list of handled authorization IDs.
     *
     * @return defensive copy of handled authorization IDs list
     */
    public List<String> getHandledAuthorizationIds() {
        return new ArrayList<>(handledAuthorizationIds);
    }

    /**
     * Sets the handled authorization IDs for this platform manager.
     *
     * @param handledAuthorizationIds list of handled authorization IDs (may be null, will be treated as empty)
     */
    public void setHandledAuthorizationIds(List<String> handledAuthorizationIds) {
        this.handledAuthorizationIds = handledAuthorizationIds != null ? new ArrayList<>(handledAuthorizationIds) : new ArrayList<>();
    }

    /**
     * Adds a handled authorization ID to this platform manager's record.
     *
     * @param authorizationId authorization ID to add (must not be null or empty)
     * @throws IllegalArgumentException if authorizationId is null or empty
     */
    public void addHandledAuthorizationId(String authorizationId) {
        if (authorizationId == null || authorizationId.trim().isEmpty()) {
            throw new IllegalArgumentException("Authorization ID cannot be null or empty");
        }
        String normalizedId = authorizationId.trim();
        if (!handledAuthorizationIds.contains(normalizedId)) {
            handledAuthorizationIds.add(normalizedId);
            totalUsersAuthorized++;
        }
    }

    /**
     * Returns the list of generated report IDs.
     *
     * @return defensive copy of generated report IDs list
     */
    public List<String> getGeneratedReportIds() {
        return new ArrayList<>(generatedReportIds);
    }

    /**
     * Sets the generated report IDs for this platform manager.
     *
     * @param generatedReportIds list of generated report IDs (may be null, will be treated as empty)
     */
    public void setGeneratedReportIds(List<String> generatedReportIds) {
        this.generatedReportIds = generatedReportIds != null ? new ArrayList<>(generatedReportIds) : new ArrayList<>();
    }

    /**
     * Adds a generated report ID to this platform manager's record.
     *
     * @param reportId report ID to add (must not be null or empty)
     * @throws IllegalArgumentException if reportId is null or empty
     */
    public void addGeneratedReportId(String reportId) {
        if (reportId == null || reportId.trim().isEmpty()) {
            throw new IllegalArgumentException("Report ID cannot be null or empty");
        }
        String normalizedId = reportId.trim();
        if (!generatedReportIds.contains(normalizedId)) {
            generatedReportIds.add(normalizedId);
        }
    }

    /**
     * Returns the list of administrative areas.
     *
     * @return defensive copy of administrative areas list
     */
    public List<String> getAdministrativeAreas() {
        return new ArrayList<>(administrativeAreas);
    }

    /**
     * Sets the administrative areas for this platform manager.
     *
     * @param administrativeAreas list of administrative areas (may be null, will be treated as empty)
     */
    public void setAdministrativeAreas(List<String> administrativeAreas) {
        this.administrativeAreas = administrativeAreas != null ? new ArrayList<>(administrativeAreas) : new ArrayList<>();
    }

    /**
     * Adds an administrative area to this platform manager's responsibility.
     *
     * @param area administrative area to add (must not be null or empty)
     * @throws IllegalArgumentException if area is null or empty
     */
    public void addAdministrativeArea(String area) {
        if (area == null || area.trim().isEmpty()) {
            throw new IllegalArgumentException("Administrative area cannot be null or empty");
        }
        String normalizedArea = area.trim().toLowerCase();
        if (!administrativeAreas.contains(normalizedArea)) {
            administrativeAreas.add(normalizedArea);
        }
    }

    /**
     * Returns the total number of users authorized.
     *
     * @return total users authorized count
     */
    public int getTotalUsersAuthorized() {
        return totalUsersAuthorized;
    }

    /**
     * Sets the total users authorized count.
     *
     * @param totalUsersAuthorized total count (must be >= 0)
     * @throws IllegalArgumentException if totalUsersAuthorized is negative
     */
    public void setTotalUsersAuthorized(int totalUsersAuthorized) {
        if (totalUsersAuthorized < 0) {
            throw new IllegalArgumentException("Total users authorized cannot be negative");
        }
        this.totalUsersAuthorized = totalUsersAuthorized;
    }

    /**
     * Returns the platform manager's start date.
     *
     * @return start date
     */
    public LocalDateTime getStartDate() {
        return startDate;
    }

    /**
     * Sets the platform manager's start date.
     *
     * @param startDate start date (must not be null)
     * @throws IllegalArgumentException if startDate is null
     */
    public void setStartDate(LocalDateTime startDate) {
        validateStartDate(startDate);
        this.startDate = startDate;
    }

    /**
     * Returns the platform manager's access level.
     *
     * @return access level
     */
    public String getAccessLevel() {
        return accessLevel;
    }

    /**
     * Sets the platform manager's access level.
     *
     * @param accessLevel access level (may be null, defaults to "junior")
     */
    public void setAccessLevel(String accessLevel) {
        this.accessLevel = accessLevel != null ? accessLevel.trim().toLowerCase() : "junior";
    }

    /**
     * Returns the maximum managed users capacity.
     *
     * @return maximum managed users
     */
    public int getMaxManagedUsers() {
        return maxManagedUsers;
    }

    /**
     * Sets the maximum managed users capacity.
     *
     * @param maxManagedUsers capacity (must be > 0)
     * @throws IllegalArgumentException if maxManagedUsers is not positive
     */
    public void setMaxManagedUsers(int maxManagedUsers) {
        validateMaxManagedUsers(maxManagedUsers);
        this.maxManagedUsers = maxManagedUsers;
    }

    /**
     * Returns whether this manager can approve registrations.
     *
     * @return true if can approve registrations
     */
    public boolean isCanApproveRegistrations() {
        return canApproveRegistrations;
    }

    /**
     * Sets the registration approval permission.
     *
     * @param canApproveRegistrations registration approval permission
     */
    public void setCanApproveRegistrations(boolean canApproveRegistrations) {
        this.canApproveRegistrations = canApproveRegistrations;
    }

    /**
     * Returns whether this manager can modify system configuration.
     *
     * @return true if can modify system config
     */
    public boolean isCanModifySystemConfig() {
        return canModifySystemConfig;
    }

    /**
     * Sets the system configuration modification permission.
     *
     * @param canModifySystemConfig system config modification permission
     */
    public void setCanModifySystemConfig(boolean canModifySystemConfig) {
        this.canModifySystemConfig = canModifySystemConfig;
    }

    /**
     * Returns whether this manager can access financial reports.
     *
     * @return true if can access financial reports
     */
    public boolean isCanAccessFinancialReports() {
        return canAccessFinancialReports;
    }

    /**
     * Sets the financial reports access permission.
     *
     * @param canAccessFinancialReports financial reports access permission
     */
    public void setCanAccessFinancialReports(boolean canAccessFinancialReports) {
        this.canAccessFinancialReports = canAccessFinancialReports;
    }

    /**
     * Returns the number of handled alerts.
     *
     * @return handled alerts count
     */
    public int getHandledAlertsCount() {
        return handledAlertsCount;
    }

    /**
     * Sets the handled alerts count.
     *
     * @param handledAlertsCount alerts count (must be >= 0)
     * @throws IllegalArgumentException if handledAlertsCount is negative
     */
    public void setHandledAlertsCount(int handledAlertsCount) {
        if (handledAlertsCount < 0) {
            throw new IllegalArgumentException("Handled alerts count cannot be negative");
        }
        this.handledAlertsCount = handledAlertsCount;
    }

    /**
     * Increments the handled alerts count.
     */
    public void incrementHandledAlertsCount() {
        this.handledAlertsCount++;
    }

    /**
     * Checks if the manager has administrative responsibility for a specific area.
     *
     * @param area area to check
     * @return true if the manager has responsibility for the area
     */
    public boolean hasAdministrativeResponsibilityFor(String area) {
        if (area == null) return false;
        String normalizedArea = area.trim().toLowerCase();
        return administrativeAreas.contains(normalizedArea);
    }

    /**
     * Checks if the manager is a senior administrator (senior, administrator, or super_admin level).
     *
     * @return true if access level is senior or higher
     */
    public boolean isSeniorAdministrator() {
        return accessLevel.contains("senior") || accessLevel.contains("administrator") || accessLevel.contains("super_admin");
    }

    /**
     * Checks if the manager can manage more users.
     *
     * @return true if under maximum capacity
     */
    public boolean canManageMoreUsers() {
        return managedUserIds.size() < maxManagedUsers;
    }

    /**
     * Returns the current workload as a percentage of maximum capacity.
     *
     * @return workload percentage (0-100)
     */
    public double getWorkloadPercentage() {
        if (maxManagedUsers == 0) return 0.0;
        return (managedUserIds.size() * 100.0) / maxManagedUsers;
    }

    /**
     * Checks if the manager has full administrative privileges.
     *
     * @return true if has all administrative permissions
     */
    public boolean hasFullAdministrativePrivileges() {
        return canApproveRegistrations && canModifySystemConfig && canAccessFinancialReports;
    }

    // ----------------- validation helpers -----------------

    /**
     * Validates that the start date is not null.
     *
     * @param startDate the start date to validate
     * @throws IllegalArgumentException if startDate is null
     */
    private static void validateStartDate(LocalDateTime startDate) {
        if (startDate == null) {
            throw new IllegalArgumentException("Start date cannot be null");
        }
    }

    /**
     * Validates that the maximum managed users is positive.
     *
     * @param maxUsers the maximum users to validate
     * @throws IllegalArgumentException if maxUsers is not positive
     */
    private static void validateMaxManagedUsers(int maxUsers) {
        if (maxUsers <= 0) {
            throw new IllegalArgumentException("Maximum managed users must be positive");
        }
    }

    /**
     * Returns a string representation of this PlatformManager.
     *
     * @return a string representation of this object
     */
    @Override
    public String toString() {
        return "PlatformManager{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", email='" + email + '\'' +
                ", accessLevel='" + accessLevel + '\'' +
                ", totalUsersAuthorized=" + totalUsersAuthorized +
                ", managedUsersCount=" + managedUserIds.size() +
                ", workloadPercentage=" + String.format("%.1f", getWorkloadPercentage()) + "%" +
                ", active=" + active +
                '}';
    }
}

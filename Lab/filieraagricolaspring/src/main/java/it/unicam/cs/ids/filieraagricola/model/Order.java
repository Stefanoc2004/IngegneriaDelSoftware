package it.unicam.cs.ids.filieraagricola.model;

import jakarta.annotation.Nullable;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.ManyToOne;
import jakarta.persistence.OneToMany;

import java.sql.Timestamp;
import java.util.List;
import java.util.UUID;

/**
 * JPA entity representing an order in the agricultural supply-chain platform.
 *
 * <p>This entity models a purchase request issued by a {@code buyer} to a {@code seller}.
 * It contains a collection of {@link OrderItem} elements, monetary summary fields,
 * timestamps that track order lifecycle events and logistic/payment metadata.</p>
 *
 * <p>Notes for Spring Boot usage:
 * <ul>
 *   <li>Instances are persisted using Spring Data JPA repositories.</li>
 *   <li>This class is intentionally serializable by JPA and has a no-arg constructor.</li>
 *   <li>The system uses defensive id generation (UUID) when an id is not provided.</li>
 * </ul></p>
 *
 * <p>Design pattern: this class participates in the Prototype pattern for safe cloning
 * in the user creation area of the project. The Prototype pattern is applied primarily
 * to {@link User} in this project. Orders are created and persisted via {@code OrderService}.</p>
 */
@Entity
public class Order  {

    /**
     * Unique identifier for the order. Generated by the service when missing.
     */
    @Id
    private String id;

    /**
     * The buyer who placed the order.
     */
    @ManyToOne
    private User buyer;

    /**
     * The seller fulfilling the order.
     */
    @ManyToOne
    private User seller;

    /**
     * Items that compose the order. Each item contains product reference and quantity.
     */
    @OneToMany
    private List<OrderItem> orderItems;

    /**
     * Sum of order item prices at creation time.
     */
    private double totalAmount;

    /**
     * Current lifecycle status of the order.
     */
    private OrderStatus status;

    /**
     * Timestamp when the order was created.
     */
    private Timestamp orderDate;

    /**
     * Expected delivery timestamp. May be null until set.
     */
    private Timestamp expectedDeliveryDate;

    /**
     * Actual delivery timestamp. Null until delivered.
     */
    private Timestamp actualDeliveryDate;

    /**
     * Delivery address for the order.
     */
    private String deliveryAddress;

    /**
     * Payment method used for the order (free-form).
     */
    private String paymentMethod;

    /**
     * Optional notes attached to the order.
     */
    @Nullable
    private String notes;

    /**
     * True when the order contains only products flagged as organic.
     */
    private boolean organicCertified;

    /**
     * Delivery method identifier (for example "home_delivery", "pickup").
     */
    private String deliveryMethod;

    /**
     * Default constructor for JPA and service usage.
     * Generates a UUID when required by the service layer.
     */
    public Order() {
        this.id = UUID.randomUUID().toString();
    }

    /**
     * Full constructor used by tests or explicit assembly.
     *
     * @param id                   persistent id (if null a UUID is recommended)
     * @param buyer                buyer user
     * @param seller               seller user
     * @param orderItems           list of order items
     * @param totalAmount          computed total
     * @param status               order status
     * @param orderDate            creation timestamp
     * @param expectedDeliveryDate expected delivery timestamp
     * @param actualDeliveryDate   actual delivery timestamp
     * @param deliveryAddress      delivery address
     * @param paymentMethod        payment method
     * @param notes                optional notes
     * @param organicCertified     organic flag
     * @param deliveryMethod       delivery method identifier
     */
    public Order(String id, User buyer, User seller, List<OrderItem> orderItems, double totalAmount, OrderStatus status, Timestamp orderDate, Timestamp expectedDeliveryDate, Timestamp actualDeliveryDate, String deliveryAddress, String paymentMethod, String notes, boolean organicCertified, String deliveryMethod) {
        this.id = id;
        this.buyer = buyer;
        this.seller = seller;
        this.orderItems = orderItems;
        this.totalAmount = totalAmount;
        this.status = status;
        this.orderDate = orderDate;
        this.expectedDeliveryDate = expectedDeliveryDate;
        this.actualDeliveryDate = actualDeliveryDate;
        this.deliveryAddress = deliveryAddress;
        this.paymentMethod = paymentMethod;
        this.notes = notes;
        this.organicCertified = organicCertified;
        this.deliveryMethod = deliveryMethod;
    }

    // Getters and setters (kept simple and self-documenting)

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public User getBuyer() {
        return buyer;
    }

    public void setBuyer(User buyer) {
        this.buyer = buyer;
    }

    public User getSeller() {
        return seller;
    }

    public void setSeller(User seller) {
        this.seller = seller;
    }

    public List<OrderItem> getOrderItems() {
        return orderItems;
    }

    public void setOrderItems(List<OrderItem> orderItems) {
        this.orderItems = orderItems;
    }

    public double getTotalAmount() {
        return totalAmount;
    }

    public void setTotalAmount(double totalAmount) {
        this.totalAmount = totalAmount;
    }

    public OrderStatus getStatus() {
        return status;
    }

    public void setStatus(OrderStatus status) {
        this.status = status;
    }

    public Timestamp getOrderDate() {
        return orderDate;
    }

    public void setOrderDate(Timestamp orderDate) {
        this.orderDate = orderDate;
    }

    public Timestamp getExpectedDeliveryDate() {
        return expectedDeliveryDate;
    }

    public void setExpectedDeliveryDate(Timestamp expectedDeliveryDate) {
        this.expectedDeliveryDate = expectedDeliveryDate;
    }

    public Timestamp getActualDeliveryDate() {
        return actualDeliveryDate;
    }

    public void setActualDeliveryDate(Timestamp actualDeliveryDate) {
        this.actualDeliveryDate = actualDeliveryDate;
    }

    public String getDeliveryAddress() {
        return deliveryAddress;
    }

    public void setDeliveryAddress(String deliveryAddress) {
        this.deliveryAddress = deliveryAddress;
    }

    public String getPaymentMethod() {
        return paymentMethod;
    }

    public void setPaymentMethod(String paymentMethod) {
        this.paymentMethod = paymentMethod;
    }

    public String getNotes() {
        return notes;
    }

    public void setNotes(String notes) {
        this.notes = notes;
    }

    public boolean isOrganicCertified() {
        return organicCertified;
    }

    public void setOrganicCertified(boolean organicCertified) {
        this.organicCertified = organicCertified;
    }

    public String getDeliveryMethod() {
        return deliveryMethod;
    }

    public void setDeliveryMethod(String deliveryMethod) {
        this.deliveryMethod = deliveryMethod;
    }

    @Override
    public String toString() {
        return "Order{" +
                "id='" + id + '\'' +
                ", buyer=" + buyer +
                ", seller=" + seller +
                ", orderItems=" + orderItems +
                ", totalAmount=" + totalAmount +
                ", status=" + status +
                ", orderDate=" + orderDate +
                ", expectedDeliveryDate=" + expectedDeliveryDate +
                ", actualDeliveryDate=" + actualDeliveryDate +
                ", deliveryAddress='" + deliveryAddress + '\'' +
                ", paymentMethod='" + paymentMethod + '\'' +
                ", notes='" + notes + '\'' +
                ", organicCertified=" + organicCertified +
                ", deliveryMethod='" + deliveryMethod + '\'' +
                '}';
    }
}
